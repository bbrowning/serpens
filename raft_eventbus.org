
* Raft EventBus

** At-most-once vs at-least-once delivery for P2P
- numRetries option - value of 0 is at-most-once, value more than that
  is at-least-once
- node ACKs after processing a P2P message
- no ACK within timeout or before node dies triggers retry behavior
- start out with at-most-once and add in retries later

** Command Log and State

All code gets RPC'd to leader node for actual creation of commands.

*** Register handlers on 2 nodes

DON'T DO THIS:
Don't bother sending registrations as Raft commands. Only the messages
and any ACKS should be commands.

node A: eb.registerHandler('foo', function(message) { ... });
node B: eb.registerHandler('foo', function(message) { ... });

{type: register, node: 'A', destination: 'foo'}
{type: register, node: 'B', destination: 'foo'}

handlers = {
  'foo': {
    nodes: ['A', 'B'],
    lastChosen: null
  }
}

*** Publish a message to all nodes
eb.publish('foo', 'hello everyone');

{type: publish, destination: 'foo', body: 'hello everyone'}

the message gets sent to A & B

*** Send a message to one node
eb.send('foo', 'hi random neighbor');

The leader chooses from registered 'foo' handlers round-robin by
taking node following the lastChosen node, wrapping around the list as
needed.

{type: send, destinination: 'foo', body: 'hi random neighbor', node: 'A'}

handlers = {
  'foo': {
    nodes: ['A', 'B'],
    lastChosen: 'A'
  }
}

*** Send another message to one node
eb.send('foo', 'hi someone else');

{type: send, destinination: 'foo', body: 'hi someone else', node: 'B'}

handlers = {
  'foo': {
    nodes: ['A', 'B'],
    lastChosen: 'B'
  }
}


*** Publish a message to a nonexistent handler
eb.publish('bar', 'goes nowhere');

No command gets sent out, message just discarded. Client API could
decide to return an error indicating that there are no handlers.

*** Send a message to a nonexistent handler
eb.send('bar', 'gets queued');

With no handlers this gets stored in a queue and released once a
handler does join.

{type: queue, destination: 'bar', body: 'gets queued'}

handlers = {
  'foo': {
    nodes: ['A', 'B'],
    lastChosen: 'B'
  }
}
queued = {
  'bar': ['gets queued']
}

*** Register bar handler on existing node
node B: eb.registerHandler('bar', function(message) { ... });

{type: register, node: 'B', destination: 'bar'}

handlers = {
  'foo': {
    nodes: ['A', 'B'],
    lastChosen: 'B'
  },
  'bar': {
    nodes: ['B'],
    lastChosen: null
  }
}
queued = {
  'bar': ['gets queued']
}

{type: send, destination: 'bar', body: 'gets queued', node: 'B'}

handlers = {
  'foo': {
    nodes: ['A', 'B'],
    lastChosen: 'B'
  },
  'bar': {
    nodes: ['B'],
    lastChosen: 'B'
  }
}
queued = {}


When a message gets sent, make sure to check its ID (messages need an
ID) against those queued for that destination and remove from the
queued hash.






* Throughput Issues

Consensus isn't fast. Duh. How can we decrease latency and improve
throughput? We can use consensus for group membership and to
distribute handler registration. But what about messages? How do we
not lose them?

Use read-your-writes when registering a handler so then an immediate
message sent get delivered to that handler.

If messages don't go through Raft, then we lose the reliability of
messages. Maybe figure out what our current throughput bottleneck is?
If we can get to tens of thousands of messages per second for a
cluster of 3 or 5 "brokers" is that good enough?

Or, do we attempt to create a Raft consensus group for the cluster
state (handlers, topics, etc) and then another consensus group per
topic that only consists of nodes with registered handlers for that
topic?

Or perhaps only one consensus group for cluster state and then use
Axon's PubSub or Push/Pull abstractions to actually distribute
messages? This would need to piggy-back on top of the socket already
opened for consensus?
